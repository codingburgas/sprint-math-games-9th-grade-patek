 #include <iostream> #include <vector> #include <string> #include <ctime> #include <cstdlib> #include <algorithm> using namespace std; // ANSI escape кодове за цветове const string RESET = "\033[0m"; const string GREEN = "\033[32m"; // Правилна буква на правилното място const string YELLOW = "\033[33m"; // Правилна буква на неправилно място const string GRAY = "\033[37m"; // Неправилна буква const vector<string> WORDS = { "apple", "grape", "peach", "berry", "melon", "lemon", "mango", "plum", "cherry", "orange" }; // Списък с възможни тайни думи const int WORD_LENGTH = 5; // Дължина на думите const int MAX_ATTEMPTS = 6; // Максимален брой опити // Функция за показване на опитите в рамка void displayAttempts(const vector<string>& attempts) { cout << "+-----+-----+-----+-----+-----+" << endl; // Горна рамка for (const string& attempt : attempts) { cout << "| " << attempt << " "; // Показване на всяка дума } cout << "|" << endl; // Завършване на реда cout << "+-----+-----+-----+-----+-----+" << endl; // Долна рамка } // Функция за проверка на познанията void checkGuess(const string& guess, const string& secret) { string result(WORD_LENGTH, '*'); // Инициализиране на резултата с '*' vector<bool> secretUsed(WORD_LENGTH, false); // За проследяване на използвани букви // Първо проверяваме за правилни букви на правилните места for (size_t i = 0; i < WORD_LENGTH; ++i) { if (guess[i] == secret[i]) { result[i] = guess[i]; // Правилна буква на правилното място secretUsed[i] = true; // Отбелязваме, че буквата е използвана } } // След това проверяваме за правилни букви на неправилни места for (size_t i = 0; i < WORD_LENGTH; ++i) { if (result[i] == '*') { // Проверяваме само за неправилно поставените букви for (size_t j = 0; j < WORD_LENGTH; ++j) { if (guess[i] == secret[j] && !secretUsed[j]) { result[i] = tolower(guess[i]); // Правилна буква на неправилно място secretUsed[j] = true; // Отбелязваме, че буквата е използвана break; } } } } // Показване на резултата с цветове cout << "Резултат: "; for (size_t i = 0; i < WORD_LENGTH; ++i) { if (guess[i] == secret[i]) { cout << GREEN << guess[i] << RESET << " "; // Правилна буква на правилното място } else if (secret.find(guess[i]) != string::npos) { cout << YELLOW << guess[i] << RESET << " "; // Правилна буква на неправилно място } else { cout << GRAY << guess[i] << RESET << " "; // Неправилна буква } } cout << endl; } void wordleGame() { srand(static_cast<unsigned int>(time(0))); // Инициализиране на генератора на случайни числа string secret = WORDS[rand() % WORDS.size()]; // Избиране на случайна тайна дума string guess; int attempts = 0; vector<string> attemptsList; // Списък за опитите cout << "Добре дошли в Wordle!" << endl; cout << "Познайте 5-буквена дума." << endl; // Основен цикъл на играта while (attempts < MAX_ATTEMPTS) { cout << "Опити останали: " << MAX_ATTEMPTS - attempts << endl; cout << "Въведете дума: "; cin >> guess; // Валидиране на входа if (guess.length() != WORD_LENGTH || !all_of(guess.begin(), guess.end(), ::islower)) { cout << "Невалиден вход. Моля, въведете 5 букви в малки букви." << endl; continue; // Преминаване към следващия опит } attemptsList.push_back(guess); // Добавяне на познатата дума към списъка displayAttempts(attemptsList); // Показване на познатите думи checkGuess(guess, secret); // Проверка на познатата дума if (guess == secret) { cout << GREEN << "Браво! Познахте думата: " << secret << RESET << endl; break; } attempts++; } // Край на играта if (attempts == MAX_ATTEMPTS) { cout << "Изчерпахте всички опити. Тайната дума беше: " << secret << endl; } } int main() { wordleGame(); }
